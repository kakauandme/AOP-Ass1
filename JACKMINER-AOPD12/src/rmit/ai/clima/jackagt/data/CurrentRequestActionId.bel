package rmit.ai.clima.jackagt.data;

import rmit.ai.clima.jackagt.events.*;

public beliefset CurrentRequestActionId extends ClosedWorld /*or OpenWorld*/
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/
/*
 * Beliefset Name: CurrentRequestActionId
 */

	// Zero or more #key field declarations.
	// These describe the key attributes of each belief.


	// Zero of more #value field declarations.
	// These describe the data attributes of each belief.
	#value field int id;

	#value field int step;

	/*	
	*/
	#posts event EAct eact;

/******** End PDT Design Block *** DO NOT EDIT IT *********/
   //The id of the most recently received RequestAction
	
   //Queries to check and get the id
   #indexed query get(logical int id, logical int step);
   #indexed query get_id(logical int id, int step);
   #indexed query get_step(int id, logical int step);   
   #indexed query check(int id, int step);
   
   #complex query query_id(logical int $id) {
            logical int $step;
    
            return get($id,$step);
   }
   #complex query query_step(logical int $step) {
            logical int $id;
    
            return get($id,$step);
   }

   #complex query check_id(int id) {
            logical int $step;
    
            return get_step(id,$step);
   }
   #complex query check_step(int step) {
            logical int $id;
    
            return get_id($id,step);
   }

   #function query public int id() {
            logical int $id,$step;
    
    		query_id($id);
    		return $id.as_int();
    }
   #function query public int step() {
            logical int $id,$step;
    
    		query_step($step);
    		return $step.as_int();
    }
    
   
	//callback function for New operation:
	public void newfact(Tuple t, BeliefState is, BeliefState was){

	}
	//callback function for Remove operation:
	public void endfact (Tuple t, BeliefState was, BeliefState is){

	}
	//callback function for Update operation:
	public void addfact(Tuple t, BeliefState is){

	}
	//callback function for Modify operation:
	public void modfact (Tuple t, BeliefState is, Tuple knocked, Tuple negated){

	}
}
